{"version":3,"sources":["components/Board/Board.module.css","components/NavBar/NavBar.module.css","components/NavBar/NavBar.jsx","components/Node/Node.jsx","components/Board/Board.jsx","components/Customisation/SearchPicker.jsx","components/Customisation/MazePicker.jsx","components/Customisation/Customisation.jsx","maze_algorithms/recursiveDivision.js","maze_algorithms/simpleTerrain.js","maze_algorithms/flappyBirdGrid.js","maze_algorithms/MazeFacade.js","path_algorithms/breadthFirstSearch.js","path_algorithms/SearchFacade.js","components/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","variant","Brand","href","rel","alt","src","width","height","className","navStyle","navBar","style","color","Text","Component","Node","nextProps","nextState","this","props","type","display","outline","padding","row","column","onMouseDown","onMouseEnter","styleClasses","getClass","id","getStyle","Board","nodes","styles","tableWrapper","tableStyle","map","rowNodes","rowId","key","node","nodeId","SearchPicker","changeAlgorithm","FormGroup","Card","Title","textAlign","Tab","Container","defaultActiveKey","Row","Col","sm","ListGroup","Item","action","onClick","Content","Pane","eventKey","MazePicker","changeMaze","Customisation","visualize","reset","buttonDisable","Form","text","Header","as","Body","newAlg","newMaze","float","Button","size","disabled","drawDungeon","endX","endY","drawnNodes","x","push","y","divide","startX","startY","axis","drawnNodes1","drawnNodes2","alternateX","alternateY","wallX","Math","floor","random","length","passageY","wallY","passageX","MazeFacade","newNodes","recursiveDivision","forEach","simpleTerrain","i","hole","j","flappyBirdGrid","Queue","elements","object","shift","solve","start","end","q","enqueue","visitedNodes","isVisited","found","isEmpty","dequeue","getNeighbours","neighbour","prev","console","log","reConstructPath","path","curr","reverse","pop","neighbours","filter","SearchFacade","nodesCopy","slice","breadthFirstSearch","Pathfinder","state","isMouseDown","mode","algorithm","maze","setState","mazeFacade","TOTAL_ROWS","TOTAL_COLS","setTimeout","document","getElementById","startNode","endNode","initialNodes","createNodes","querySelectorAll","waitTime","drawMaze","waitTime2","drawSearchPath","onMouseUp","handleMouseUp","lg","handleMouseDown","handleMouseEnter","createNodeObject","dist","Infinity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,WAAa,4B,mBCA1ED,EAAOC,QAAU,CAAC,OAAS,yB,qPCmCZC,EA/Bf,uKAEI,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACjB,0BACEA,KAAK,wEACLC,IAAI,eAEN,yBACEC,IAAI,GACJC,IAAI,YACJC,MAAM,KACNC,OAAO,KACPC,UAAU,6BAEX,KACD,0BAAMA,UAAWC,IAASC,QAA1B,4BACA,2BAAOC,MAAO,CAAEC,MAAO,SAAvB,KAA2C,IAC3C,kBAACd,EAAA,EAAOe,KAAR,4BACA,0CAhBF,yBAiBE,0CACA,0CAlBF,mCALV,GAA4BC,aC2CbC,G,MA7Cf,oLACuBC,EAAWC,GAChC,OAAOC,KAAKC,MAAMC,OAASJ,EAAUI,OAFvC,iCAcE,MARc,CACbC,QAAS,eACTC,QAAS,kBACTf,OAAQ,OACRgB,QAAS,MACTjB,MAAO,UAXV,iCAiBa,IACHc,EAASF,KAAKC,MAAdC,KACR,MAAa,YAATA,EACI,UACY,SAATA,EACH,QACY,UAATA,EACH,QACY,QAATA,EACH,WADD,IAzBT,+BA8BW,IAAD,EACiDF,KAAKC,MAAtDK,EADA,EACAA,IAAKC,EADL,EACKA,OAAQL,EADb,EACaA,KAAMM,EADnB,EACmBA,YAAaC,EADhC,EACgCA,aAClCC,EAAeV,KAAKW,WAC1B,OACC,wBACCC,GAAE,eAAUN,EAAV,YAAiBC,GACnBjB,UAAWoB,EACXjB,MAAOO,KAAKa,SAASX,GACrBM,YAAa,kBAAMA,EAAYF,EAAKC,IACpCE,aAAc,kBAAMA,EAAaH,EAAKC,UAvC1C,GAA0BX,c,iBCmCXkB,EAjCf,uKACW,IAAD,EACqCd,KAAKC,MAA1Cc,EADA,EACAA,MAAOP,EADP,EACOA,YAAaC,EADpB,EACoBA,aAC5B,OACC,yBAAKnB,UAAW0B,IAAOC,cACtB,2BAAO3B,UAAW0B,IAAOE,YACxB,+BACEH,EAAMI,KAAI,SAACC,EAAUC,GACrB,OACC,wBAAIC,IAAKD,GACPD,EAASD,KAAI,SAACI,EAAMC,GAAY,IACxBlB,EAAsBiB,EAAtBjB,IAAKC,EAAiBgB,EAAjBhB,OAAQL,EAASqB,EAATrB,KACrB,OACC,kBAAC,EAAD,CACCoB,IAAKE,EACLlB,IAAKA,EACLC,OAAQA,EACRL,KAAMA,EACNM,YAAa,SAACF,EAAKC,GAAN,OAAiBC,EAAYF,EAAKC,IAC/CE,aAAc,SAACH,EAAKC,GAAN,OAAiBE,EAAaH,EAAKC,oBAnB7D,GAA2BX,a,gECwEZ6B,EA1Ef,uKACY,IACAC,EAAoB1B,KAAKC,MAAzByB,gBACR,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAKC,MAAN,CAAYpC,MAAO,CAAEqC,UAAW,SAAhC,uCAGA,kBAACC,EAAA,EAAIC,UAAL,CAAepB,GAAG,0BAA0BqB,iBAAiB,QAC3D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,SACLwD,QAAS,WACPd,EAAgB,WAJpB,aASA,kBAACW,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,YACLwD,QAAS,WACPd,EAAgB,cAJpB,YASA,kBAACW,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,OACLwD,QAAS,WACPd,EAAgB,SAJpB,0BAWJ,kBAACS,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACL,EAAA,EAAIU,QAAL,KACE,kBAACV,EAAA,EAAIW,KAAL,CAAUC,SAAS,QAAnB,iJAGiC,IAC/B,6DAEF,kBAACZ,EAAA,EAAIW,KAAL,CAAUC,SAAS,aAAnB,6RAOA,kBAACZ,EAAA,EAAIW,KAAL,CAAUC,SAAS,UAAnB,+PAzDlB,GAAkC/C,aC+EnBgD,EA/Ef,uKACY,IACAC,EAAe7C,KAAKC,MAApB4C,WACR,OACE,6BACE,kBAAClB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAKC,MAAN,CAAYpC,MAAO,CAAEqC,UAAW,SAAhC,yBAGA,kBAACC,EAAA,EAAIC,UAAL,CAAepB,GAAG,0BAA0BqB,iBAAiB,SAC3D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,QACLwD,QAAS,WACPK,EAAW,UAJf,eASA,kBAACR,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,iBACLwD,QAAS,WACPK,EAAW,mBAJf,kBASA,kBAACR,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,qBACLwD,QAAS,WACPK,EAAW,uBAJf,sBASA,kBAACR,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNvD,KAAK,kBACLwD,QAAS,WACPK,EAAW,oBAJf,sBAWJ,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACL,EAAA,EAAIU,QAAL,KACE,kBAACV,EAAA,EAAIW,KAAL,CAAUC,SAAS,SAAnB,yFAIA,kBAACZ,EAAA,EAAIW,KAAL,CAAUC,SAAS,kBAAnB,yEAIA,kBAACZ,EAAA,EAAIW,KAAL,CAAUC,SAAS,sBAAnB,iEAIA,kBAACZ,EAAA,EAAIW,KAAL,CAAUC,SAAS,mBAAnB,uGAjElB,GAAgC/C,aC6CjBkD,EA3Cf,uKACY,IAAD,EAOH9C,KAAKC,MALP8C,EAFK,EAELA,UACAC,EAHK,EAGLA,MACAtB,EAJK,EAILA,gBACAmB,EALK,EAKLA,WACAI,EANK,EAMLA,cAEF,OACE,kBAACC,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,CAAM/C,GAAG,OAAOsE,KAAK,QAAQ1D,MAAO,CAAEJ,OAAQ,UAC5C,kBAACuC,EAAA,EAAKwB,OAAN,CAAaC,GAAG,MAAhB,oCACA,kBAACzB,EAAA,EAAK0B,KAAN,KACE,kBAAC,EAAD,CACE5B,gBAAiB,SAAC6B,GAAD,OAAY7B,EAAgB6B,MAE/C,kBAAC,EAAD,CAAYV,WAAY,SAACW,GAAD,OAAaX,EAAWW,MAChD,kBAAC7B,EAAA,EAAD,CAAWlC,MAAO,CAAEgE,MAAO,SACzB,kBAACC,EAAA,EAAD,CACElB,QAAS,kBAAMO,KACfjE,QAAQ,UACR6E,KAAK,KACLC,SAAUX,GAJZ,6BAOU,IACV,kBAACS,EAAA,EAAD,CACElB,QAAS,kBAAMQ,KACflE,QAAQ,SACR6E,KAAK,KACLC,SAAUX,GAJZ,SAOU,YAlCxB,GAAmCrD,a,QCE7BiE,EAAc,SAAC9C,EAAO+C,EAAMC,GAEjC,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,GAAKH,EAAMG,IAC1BlD,EAAMkD,GAAG,GAAG/D,KAAO,OACnBa,EAAMkD,GAAGF,GAAM7D,KAAO,OACtB8D,EAAWE,KAAKnD,EAAMkD,GAAG,IACzBD,EAAWE,KAAKnD,EAAMkD,GAAGF,IAG1B,IAAK,IAAII,EAAI,EAAGA,GAAKJ,EAAMI,IAC1BpD,EAAM,GAAGoD,GAAGjE,KAAO,OACnBa,EAAM+C,GAAMK,GAAGjE,KAAO,OACtB8D,EAAWE,KAAKnD,EAAM,GAAGoD,IACzBH,EAAWE,KAAKnD,EAAM+C,GAAMK,IAG7B,OAAOH,GAGFI,EAAS,SAATA,EAAUrD,EAAOsD,EAAQC,EAAQR,EAAMC,EAAMQ,GAClD,IACIC,EACAC,EAFAT,EAAa,GAIjB,GAAIF,EAAOO,GAAUN,EAAOO,EAC3B,MAAO,GACD,GAAa,eAATC,EAAuB,CAGjC,IAFA,IAAIG,EAAa,GAERT,EAAII,EAAQJ,GAAKH,EAAMG,GAAK,EACpCS,EAAWR,KAAKD,GAIjB,IADA,IAAIU,EAAa,GACRR,EAAIG,EAAS,EAAGH,GAAKJ,EAAO,EAAGI,GAAK,EAC5CQ,EAAWT,KAAKC,GAMjB,IAHA,IAAIS,EAAQF,EAAWG,KAAKC,MAAMD,KAAKE,SAAWL,EAAWM,SACzDC,EAAWN,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAWK,SAEvDb,EAAIG,EAAS,EAAGH,GAAKJ,EAAO,EAAGI,IACnCA,IAAMc,GAAqC,UAAzBlE,EAAM6D,GAAOT,GAAGjE,MAA6C,QAAzBa,EAAM6D,GAAOT,GAAGjE,OACzEa,EAAM6D,GAAOT,GAAGjE,KAAO,OACvB8D,EAAWE,KAAKnD,EAAM6D,GAAOT,KAc/B,OATCK,EAAcJ,EAAOrD,EAAOsD,EAAQC,EAAQM,EAAQ,EAAGb,EADpDa,EAAQP,EAAS,EAAIN,EAAOO,EAC8B,aAEA,YAG7DG,EAAcL,EAAOrD,EAAO6D,EAAQ,EAAGN,EAAQR,EAAMC,EADlDD,EAAOc,EAAQ,EAAIb,EAAOO,EAC8B,aAEA,YAEtD,GAAN,OAAYN,EAAZ,YAA2BQ,GAA3B,YAA2CC,IAG3C,IADA,IAAIC,EAAa,GACRT,EAAII,EAAS,EAAGJ,GAAKH,EAAO,EAAGG,GAAK,EAC5CS,EAAWR,KAAKD,GAIjB,IADA,IAAIU,EAAa,GACRR,EAAIG,EAAQH,GAAKJ,EAAMI,GAAK,EACpCQ,EAAWT,KAAKC,GAMjB,IAHA,IAAIe,EAAQP,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAWK,SACzDG,EAAWT,EAAWG,KAAKC,MAAMD,KAAKE,SAAWL,EAAWM,SAEvDf,EAAII,EAAS,EAAGJ,GAAKH,EAAO,EAAGG,IACnCA,IAAMkB,GAAqC,UAAzBpE,EAAMkD,GAAGiB,GAAOhF,MAA6C,QAAzBa,EAAMkD,GAAGiB,GAAOhF,OACzEa,EAAMkD,GAAGiB,GAAOhF,KAAO,OACvB8D,EAAWE,KAAKnD,EAAMkD,GAAGiB,KAc3B,OATCV,EAAcJ,EAAOrD,EAAOsD,EAAQC,EAAQR,EAAMoB,EAAQ,EADvDpB,EAAOO,EAASa,EAAQZ,EAAS,EACyB,aAEA,YAG7DG,EAAcL,EAAOrD,EAAOsD,EAAQa,EAAQ,EAAGpB,EAAMC,EADlDD,EAAOO,EAASN,EAAOmB,EAAQ,EACyB,aAEA,YAEtD,GAAN,OAAYlB,EAAZ,YAA2BQ,GAA3B,YAA2CC,KCnFvCZ,EAAc,SAAC9C,EAAO+C,EAAMC,GAEjC,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,GAAKH,EAAMG,IAC1BlD,EAAMkD,GAAG,GAAG/D,KAAO,OACnBa,EAAMkD,GAAGF,GAAM7D,KAAO,OACtB8D,EAAWE,KAAKnD,EAAMkD,GAAG,IACzBD,EAAWE,KAAKnD,EAAMkD,GAAGF,IAG1B,IAAK,IAAII,EAAI,EAAGA,GAAKJ,EAAMI,IAC1BpD,EAAM,GAAGoD,GAAGjE,KAAO,OACnBa,EAAM+C,GAAMK,GAAGjE,KAAO,OACtB8D,EAAWE,KAAKnD,EAAM,GAAGoD,IACzBH,EAAWE,KAAKnD,EAAM+C,GAAMK,IAG7B,OAAOH,GCfFH,EAAc,SAAC9C,EAAO+C,EAAMC,GAEjC,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,GAAKH,EAAMG,IAC1BlD,EAAMkD,GAAG,GAAG/D,KAAO,OACnBa,EAAMkD,GAAGF,GAAM7D,KAAO,OACtB8D,EAAWE,KAAKnD,EAAMkD,GAAG,IACzBD,EAAWE,KAAKnD,EAAMkD,GAAGF,IAG1B,IAAK,IAAII,EAAI,EAAGA,GAAKJ,EAAMI,IAC1BpD,EAAM,GAAGoD,GAAGjE,KAAO,OACnBa,EAAM+C,GAAMK,GAAGjE,KAAO,OACtB8D,EAAWE,KAAKnD,EAAM,GAAGoD,IACzBH,EAAWE,KAAKnD,EAAM+C,GAAMK,IAG7B,OAAOH,GC3BKoB,EAAb,WACC,WAAYrE,EAAOsD,EAAQC,EAAQR,EAAMC,EAAMQ,GAAO,oBACrDvE,KAAKe,MAAQA,EACbf,KAAKqE,OAASA,EACdrE,KAAKsE,OAASA,EACdtE,KAAK8D,KAAOA,EACZ9D,KAAK+D,KAAOA,EACZ/D,KAAKuE,KAAOA,EAPd,gEAWE,OHf+B,SAACxD,EAAOsD,EAAQC,EAAQR,EAAMC,EAAMQ,GACpE,IAAMC,EAAcX,EAAY9C,EAAO+C,EAAMC,GACvCU,EAAcL,EAAOrD,EAAOsD,EAAS,EAAGC,EAAS,EAAGR,EAAO,EAAGC,EAAO,EAAGQ,GAE9E,MAAO,CAAEc,SAAUtE,EAAOiD,WADV,sBAAQQ,GAAR,YAAwBC,KGYhCa,CAAkBtF,KAAKe,MAAOf,KAAKqE,OAAQrE,KAAKsE,OAAQtE,KAAK8D,KAAM9D,KAAK+D,KAAM/D,KAAKuE,QAX5F,sCAeE,OFnB2B,SAACxD,EAAO+C,EAAMC,GAC1C,IAAMS,EAAcX,EAAY9C,EAAO+C,EAAMC,GACzCU,EAAc,GASlB,OARA1D,EAAMwE,SAAQ,SAACjF,GACdA,EAAIiF,SAAQ,SAAChE,GACRsD,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAAK,IAAoB,UAAdxD,EAAKrB,MAAkC,QAAdqB,EAAKrB,OAC7EqB,EAAKrB,KAAO,OACZuE,EAAYP,KAAK3C,UAIb,CAAER,QAAOiD,WAAW,GAAD,mBAAOQ,GAAgBC,IEQzCe,CAAcxF,KAAKe,MAAOf,KAAK8D,KAAM9D,KAAK+D,QAfnD,uCAmBE,ODvB4B,SAAChD,EAAO+C,EAAMC,GAG3C,IAFA,IAAMS,EAAcX,EAAY9C,EAAO+C,EAAMC,GACzCU,EAAc,GACTgB,EAAI,EAAGA,EAAI1B,EAAM0B,GAAK,EAE9B,IADA,IAAIC,EAAO,EAAIb,KAAKC,MAAMD,KAAKE,UAAYjB,EAAO,IACzC6B,EAAI,EAAGA,EAAI7B,EAAM6B,IACrBA,IAAMD,GAA6B,UAArB3E,EAAM4E,GAAGF,GAAGvF,MAAyC,QAArBa,EAAM4E,GAAGF,GAAGvF,OAC7Da,EAAM4E,GAAGF,GAAGvF,KAAO,OACnBuE,EAAYP,KAAKnD,EAAM4E,GAAGF,KAI7B,MAAO,CAAE1E,QAAOiD,WAAW,GAAD,mBAAOQ,GAAgBC,ICWzCmB,CAAe5F,KAAKe,MAAOf,KAAK8D,KAAM9D,KAAK+D,UAnBpD,KCJM8B,E,WACL,aAAe,oBACd7F,KAAK8F,SAAW,G,oDAGTC,GACP/F,KAAK8F,SAAS5B,KAAK6B,K,gCAInB,OAAO/F,KAAK8F,SAASE,U,gCAIrB,OAAgC,IAAzBhG,KAAK8F,SAASd,W,KAUjBiB,EAAQ,SAACC,EAAOC,EAAKpF,GAC1B,IAAIqF,EAAI,IAAIP,EACZO,EAAEC,QAAQH,GAEV,IAGI3E,EAHA+E,EAAe,GAEnBvF,EAAMmF,EAAM5F,KAAK4F,EAAM3F,QAAQgG,WAAY,EAI3C,IADA,IAAIC,GAAQ,GACJJ,EAAEK,YACTlF,EAAO6E,EAAEM,UACIC,EAAcpF,EAAMR,GAEtBwE,SAAQ,SAACqB,GACnB,IAAKA,EAAUL,UAAW,CACzB,GAAIK,EAAUtG,MAAQ6F,EAAI7F,KAAOsG,EAAUrG,SAAW4F,EAAI5F,OAIzD,OAHAqG,EAAUL,WAAY,EACtBK,EAAUC,KAAOtF,OACjBiF,GAAQ,GAGTM,QAAQC,IAAI,KACZX,EAAEC,QAAQO,GACVN,EAAapC,KAAK0C,GAClBA,EAAUL,WAAY,EACtBK,EAAUC,KAAOtF,OAGfiF,KAIL,OAAOF,GAGFU,EAAkB,SAACd,EAAOC,EAAKpF,GAEpC,IADA,IAAIkG,EAAO,GACFC,EAAOf,EAAc,OAATe,EAAeA,EAAOA,EAAKL,KAC/CI,EAAK/C,KAAKgD,GAKX,OAFAD,EAAKE,UAEDF,EAAK,KAAOf,GACfe,EAAKjB,QACLiB,EAAKG,MACEH,GAED,IAGFN,EAAgB,SAACpF,EAAMR,GAC5B,IAAMsG,EAAa,GACX/G,EAAgBiB,EAAhBjB,IAAKC,EAAWgB,EAAXhB,OAKb,OAJID,EAAM,GAAG+G,EAAWnD,KAAKnD,EAAMT,EAAM,GAAGC,IACxCD,EAAMS,EAAMiE,OAAS,GAAGqC,EAAWnD,KAAKnD,EAAMT,EAAM,GAAGC,IACvDA,EAAS,GAAG8G,EAAWnD,KAAKnD,EAAMT,GAAKC,EAAS,IAChDA,EAASQ,EAAM,GAAGiE,OAAS,GAAGqC,EAAWnD,KAAKnD,EAAMT,GAAKC,EAAS,IAC/D8G,EAAWC,QAAO,SAACV,GACzB,OAAQA,EAAUL,WAAgC,SAAnBK,EAAU1G,SClF9BqH,EAAb,WACC,WAAYrB,EAAOC,EAAKpF,GAAQ,oBAC/Bf,KAAKkG,MAAQA,EACblG,KAAKmG,IAAMA,EACXnG,KAAKe,MAAQA,EAJf,iEAQE,ODQgC,SAACmF,EAAOC,EAAKpF,GAC9C,IAAMyG,EAAYzG,EAAM0G,QAExB,MAAO,CAAEnB,aADYL,EAAMC,EAAOC,EAAKpF,GACFkG,KAAMD,EAAgBd,EAAOC,EAAKqB,ICX/DE,CAAmB1H,KAAKkG,MAAOlG,KAAKmG,IAAKnG,KAAKe,WARvD,KCgBa4G,EAAb,kDACE,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACX7G,MAAO,GACP8G,aAAa,EACbC,KAAM,OACNC,UAAW,MACXC,KAAM,OACN/E,eAAe,GARL,EADhB,gEAcIjD,KAAKgD,UAdT,sCAiBkB1C,EAAKC,GACnB,IAAM8E,EAAWrF,KAAK4H,MAAM7G,MAAM0G,QACC,YAA/BpC,EAAS/E,GAAKC,GAAQL,MACxBmF,EAAS/E,GAAKC,GAAQL,KAAO,OAC7BF,KAAKiI,SAAS,CAAElH,MAAOsE,EAAUwC,aAAa,EAAMC,KAAM,UAClB,SAA/BzC,EAAS/E,GAAKC,GAAQL,OAC/BmF,EAAS/E,GAAKC,GAAQL,KAAO,UAC7BF,KAAKiI,SAAS,CAAElH,MAAOsE,EAAUwC,aAAa,EAAMC,KAAM,aAxBhE,uCA4BmBxH,EAAKC,GACpB,GAAIP,KAAK4H,MAAMC,YAAf,CACE,IAAMxC,EAAWrF,KAAK4H,MAAM7G,MAAM0G,QAEZ,SAApBzH,KAAK4H,MAAME,MACoB,YAA/BzC,EAAS/E,GAAKC,GAAQL,KAEtBmF,EAAS/E,GAAKC,GAAQL,KAAO,OAET,UAApBF,KAAK4H,MAAME,MACoB,SAA/BzC,EAAS/E,GAAKC,GAAQL,OAEtBmF,EAAS/E,GAAKC,GAAQL,KAAO,WAG/BF,KAAKiI,SAAS,CAAElH,MAAOsE,OA3C7B,sCAkDIrF,KAAKiI,SAAS,CAAEJ,aAAa,MAlDjC,sCAqDkBtE,GACdvD,KAAKiI,SAAS,CAAEF,UAAWxE,MAtD/B,iCAyDaC,GACTxD,KAAKiI,SAAS,CAAED,KAAMxE,MA1D1B,iCAgEI,IAAMgE,EAAYxH,KAAK4H,MAAM7G,MAAM0G,QAC3BO,EAAShI,KAAK4H,MAAdI,KACFE,EAAa,IAAI9C,EACrBoC,EACA,EACA,EACAW,GACAC,GACA,cAEF,GAAa,SAATJ,EAAJ,CAYA,IAxBS,IAuBLd,EAvBK,EAgBE,kBAATc,EACIE,EAAW1C,gBACF,sBAATwC,EACAE,EAAW5C,oBACF,mBAAT0C,EACAE,EAAWtC,iBACX,GAPU5B,GAfP,EAeHqB,SAfG,EAeOrB,YAfP,WAwBAyB,GACP4C,YAAW,WACTnB,EAAOlD,EAAWyB,GAClB6C,SAASC,eAAT,eAAgCrB,EAAK5G,IAArC,YAA4C4G,EAAK3G,SAAUjB,UACzD,UACD,EAAImG,IALAA,EAAI,EAAGA,EAAIzB,EAAWgB,OAAQS,IAAM,EAApCA,GAOT,OAAO,EAAIzB,EAAWgB,UA7F1B,uCA4GI,IAZgB,IAWZkC,EAVInG,EAAUf,KAAK4H,MAAf7G,MACFyH,EAAYzH,EAvGC,IACA,GAuGb0H,EAAU1H,EAtGC,GACA,IAkGF,EAIM,IAAIwG,EAAaiB,EAAWC,EAAS1H,GACd2G,mBAC1Cc,EACAC,EACA1H,GAHMkG,EALO,EAKPA,KAAMX,EALC,EAKDA,aALC,WAYNb,GACP4C,YAAW,WACTnB,EAAOZ,EAAab,GACpB6C,SAASC,eAAT,eAAgCrB,EAAK5G,IAArC,YAA4C4G,EAAK3G,SAAUjB,UACzD,YACD,EAAImG,IALAA,EAAI,EAAGA,EAAIa,EAAatB,OAAQS,IAAM,EAAtCA,GAgBT,OATA4C,YAAW,WACT,IADgB,IAAD,WACN5C,GACP4C,YAAW,WACTnB,EAAOD,EAAKxB,GACZ6C,SAASC,eAAT,eAAgCrB,EAAK5G,IAArC,YAA4C4G,EAAK3G,SAAUjB,UACzD,kBACD,GAAKmG,IALDA,EAAI,EAAGA,EAAIwB,EAAKjC,OAAQS,IAAM,EAA9BA,KAOR,EAAIa,EAAatB,QACb,EAAIsB,EAAatB,OAAS,GAAKiC,EAAKjC,SA5H/C,8BAgII,IAAI0D,EAAeC,IACnBD,EAAanD,SAAQ,SAAChE,GAAD,OAAWA,EAAKrB,KAAO,aAC5CoI,SAASM,iBAAiB,gBAAgBrD,SAAQ,SAAChE,GAE5B,UAAnBA,EAAKjC,WACc,kBAAnBiC,EAAKjC,WACc,YAAnBiC,EAAKjC,YAELiC,EAAKjC,UAAY,cAGrBoJ,EAhJmB,IACA,GA+I0BxI,KAAO,QACpDwI,EA/IiB,GACA,IA8IwBxI,KAAO,MAChDF,KAAKiI,SAAS,CAAElH,MAAO2H,MA7I3B,kCAgJe,IAAD,OACV1I,KAAKiI,SAAS,CAAEhF,eAAe,IAE/BoF,YAAW,WACT,IAAMQ,EAAW,EAAKC,WACtBT,YAAW,WACT,IAAMU,EAAY,EAAKC,iBACvBX,YAAW,WACT,EAAKJ,SAAS,CAAEhF,eAAe,MAC9B8F,EAAY,OACdF,EAAW,OACb,QA3JP,+BA8JY,IAAD,SACuC7I,KAAK4H,MAA3C7G,EADD,EACCA,MAAO8G,EADR,EACQA,YAAa5E,EADrB,EACqBA,cAC5B,OACE,yBAAKgG,UAAW,kBAAM,EAAKC,kBACzB,kBAAC,EAAD,MACA,kBAAChH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKgH,GAAI,GACP,kBAAC,EAAD,CACEpI,MAAOA,EACP8G,YAAaA,EACbrH,YAAa,SAACF,EAAKC,GAAN,OAAiB,EAAK6I,gBAAgB9I,EAAKC,IACxDE,aAAc,SAACH,EAAKC,GAAN,OAAiB,EAAK8I,iBAAiB/I,EAAKC,OAG9D,kBAAC4B,EAAA,EAAD,CAAKgH,GAAI,GACP,kBAAC,EAAD,CACElG,cAAeA,EACfF,UAAW,kBAAM,EAAKA,aACtBC,MAAO,kBAAM,EAAKA,SAClBtB,gBAAiB,SAAC6B,GAAD,OAAY,EAAK7B,gBAAgB6B,IAClDV,WAAY,SAACW,GAAD,OAAa,EAAKX,WAAWW,aAlLvD,GAAgC5D,aA6L1B+I,EAAc,WAElB,IADA,IAAM5H,EAAQ,GACLT,EAAM,EAAGA,EAvMD,GAuMmBA,IAAO,CAEzC,IADA,IAAMc,EAAW,GACRb,EAAS,EAAGA,EAxMN,GAwM2BA,IACxCa,EAAS8C,KAAKoF,EAAiBhJ,EAAKC,IAEtCQ,EAAMmD,KAAK9C,GAEb,OAAOL,GAGHuI,EAAmB,SAAChJ,EAAKC,GAC7B,MAAO,CACLD,MACAC,SACAL,KAAM,UACNqG,WAAW,EACXM,KAAM,KACN0C,KAAMC,MAIK7B,ICxNA8B,G,6KAPb,OACC,yBAAKnK,UAAU,OACd,kBAAC,EAAD,W,GAJcM,cCOE8J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.eed0a58f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableWrapper\":\"Board_tableWrapper__3L-oJ\",\"tableStyle\":\"Board_tableStyle__1hg4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__36P4w\"};","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport navStyle from \"./NavBar.module.css\";\n\nexport class NavBar extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            <link\n              href=\"https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap\"\n              rel=\"stylesheet\"\n            />\n            <img\n              alt=\"\"\n              src=\"/maze.svg\"\n              width=\"35\"\n              height=\"35\"\n              className=\"d-inline-block align-top\"\n            />\n            {\"  \"}\n            <span className={navStyle.navBar}>PATH FINDING VISUALISER </span>\n            <small style={{ color: \"#ggg\" }}> </small>{\" \"}\n            <Navbar.Text>Developed By: Arnav</Navbar.Text>\n            <span>&nbsp;&nbsp;</span> Red Node is the Start\n            <span>&nbsp;&nbsp;</span>\n            <span>&nbsp;&nbsp;</span> Green Node is the Target\n          </Navbar.Brand>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './animation.css';\n\nexport class Node extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn this.props.type !== nextProps.type;\n\t}\n\n\tgetStyle() {\n\t\tconst style = {\n\t\t\tdisplay: 'inline-block',\n\t\t\toutline: '1px solid black',\n\t\t\theight: '27px',\n\t\t\tpadding: '0px',\n\t\t\twidth: '27px'\n\t\t};\n\n\t\treturn style;\n\t}\n\n\tgetClass() {\n\t\tconst { type } = this.props;\n\t\tif (type === 'regular') {\n\t\t\treturn 'regular';\n\t\t} else if (type === 'wall') {\n\t\t\treturn 'walls';\n\t\t} else if (type === 'start') {\n\t\t\treturn 'start';\n\t\t} else if (type === 'end') {\n\t\t\treturn 'end';\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { row, column, type, onMouseDown, onMouseEnter } = this.props;\n\t\tconst styleClasses = this.getClass();\n\t\treturn (\n\t\t\t<td\n\t\t\t\tid={`node_${row}_${column}`}\n\t\t\t\tclassName={styleClasses}\n\t\t\t\tstyle={this.getStyle(type)}\n\t\t\t\tonMouseDown={() => onMouseDown(row, column)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, column)}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Node;\n","import React, { Component } from 'react';\nimport Node from '../Node/Node';\n\nimport styles from './Board.module.css';\n\nexport class Board extends Component {\n\trender() {\n\t\tconst { nodes, onMouseDown, onMouseEnter } = this.props;\n\t\treturn (\n\t\t\t<div className={styles.tableWrapper}>\n\t\t\t\t<table className={styles.tableStyle}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{nodes.map((rowNodes, rowId) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={rowId}>\n\t\t\t\t\t\t\t\t\t{rowNodes.map((node, nodeId) => {\n\t\t\t\t\t\t\t\t\t\tconst { row, column, type } = node;\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\t\t\tkey={nodeId}\n\t\t\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, column) => onMouseDown(row, column)}\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, column) => onMouseEnter(row, column)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport { Row, Col, FormGroup, Card, Tab, ListGroup } from \"react-bootstrap\";\n\nexport class SearchPicker extends Component {\n  render() {\n    const { changeAlgorithm } = this.props;\n    return (\n      <div>\n        <FormGroup>\n          <Card.Title style={{ textAlign: \"left\" }}>\n            1. Choose an Algorithm to Visualise\n          </Card.Title>\n          <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#bfs\">\n            <Row>\n              <Col sm={5}>\n                <ListGroup>\n                  <ListGroup.Item\n                    action\n                    href=\"#astar\"\n                    onClick={() => {\n                      changeAlgorithm(\"astar\");\n                    }}\n                  >\n                    A* Search\n                  </ListGroup.Item>\n                  <ListGroup.Item\n                    action\n                    href=\"#dijkstra\"\n                    onClick={() => {\n                      changeAlgorithm(\"dijkstra\");\n                    }}\n                  >\n                    Dijkstra\n                  </ListGroup.Item>\n                  <ListGroup.Item\n                    action\n                    href=\"#bfs\"\n                    onClick={() => {\n                      changeAlgorithm(\"bfs\");\n                    }}\n                  >\n                    Breadth First Search\n                  </ListGroup.Item>\n                </ListGroup>\n              </Col>\n              <Col sm={7}>\n                <Tab.Content>\n                  <Tab.Pane eventKey=\"#bfs\">\n                    BFS is a traversing algorithm where you should start from a\n                    selected node and traverse the graph layerwise thus\n                    exploring the neighbour nodes.{\" \"}\n                    <em>Shortest path is guarenteed!</em>\n                  </Tab.Pane>\n                  <Tab.Pane eventKey=\"#dijkstra\">\n                    One algorithm for finding the shortest path from a starting\n                    node to a target node in a weighted graph is Dijkstra’s\n                    algorithm. The algorithm creates a tree of shortest paths\n                    from the starting vertex, the source, to all other points in\n                    the graph. This is what Google Maps uses.\n                  </Tab.Pane>\n                  <Tab.Pane eventKey=\"#astar\">\n                    A* is an informed search algorithm, or a best-first search,\n                    meaning that it is formulated in terms of weighted graphs:\n                    starting from a specific starting node of a graph, it aims\n                    to find a path to the given goal node having the smallest\n                    cost.\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Tab.Container>\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nexport default SearchPicker;\n","import React, { Component } from \"react\";\nimport { Row, Col, FormGroup, Card, Tab, ListGroup } from \"react-bootstrap\";\n\nexport class MazePicker extends Component {\n  render() {\n    const { changeMaze } = this.props;\n    return (\n      <div>\n        <FormGroup>\n          <Card.Title style={{ textAlign: \"left\" }}>\n            2. Select Obstruction\n          </Card.Title>\n          <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#draw\">\n            <Row>\n              <Col sm={5}>\n                <ListGroup>\n                  <ListGroup.Item\n                    action\n                    href=\"#draw\"\n                    onClick={() => {\n                      changeMaze(\"draw\");\n                    }}\n                  >\n                    Draw a Wall\n                  </ListGroup.Item>\n                  <ListGroup.Item\n                    action\n                    href=\"#simpleTerrain\"\n                    onClick={() => {\n                      changeMaze(\"simpleTerrain\");\n                    }}\n                  >\n                    Simple Terrain\n                  </ListGroup.Item>\n                  <ListGroup.Item\n                    action\n                    href=\"#recursiveDivision\"\n                    onClick={() => {\n                      changeMaze(\"recursiveDivision\");\n                    }}\n                  >\n                    Recursive Division\n                  </ListGroup.Item>\n                  <ListGroup.Item\n                    action\n                    href=\"#flappyBirdGrid\"\n                    onClick={() => {\n                      changeMaze(\"flappyBirdGrid\");\n                    }}\n                  >\n                    Flappy Bird Grid\n                  </ListGroup.Item>\n                </ListGroup>\n              </Col>\n              <Col sm={7}>\n                <Tab.Content>\n                  <Tab.Pane eventKey=\"#draw\">\n                    Draw your own walls on the grid and the search algorithm\n                    will find its way around it!\n                  </Tab.Pane>\n                  <Tab.Pane eventKey=\"#simpleTerrain\">\n                    Randomized terrain covering about one-third of all nodes on\n                    the grid.\n                  </Tab.Pane>\n                  <Tab.Pane eventKey=\"#recursiveDivision\">\n                    A maze will be generated using a divide and conquer\n                    approach.\n                  </Tab.Pane>\n                  <Tab.Pane eventKey=\"#flappyBirdGrid\">\n                    Obstructions inspired from the Flappy Bird game (My\n                    favourite game so wanted to try this)\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Tab.Container>\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nexport default MazePicker;\n","import React, { Component } from \"react\";\nimport { Form, FormGroup, Button, Card } from \"react-bootstrap\";\nimport SearchPicker from \"./SearchPicker\";\nimport MazePicker from \"./MazePicker\";\n\nexport class Customisation extends Component {\n  render() {\n    const {\n      visualize,\n      reset,\n      changeAlgorithm,\n      changeMaze,\n      buttonDisable,\n    } = this.props;\n    return (\n      <Form>\n        <Card bg=\"dark\" text=\"light\" style={{ height: \"815px\" }}>\n          <Card.Header as=\"h9\">Scroll Down to Start Visualising</Card.Header>\n          <Card.Body>\n            <SearchPicker\n              changeAlgorithm={(newAlg) => changeAlgorithm(newAlg)}\n            />\n            <MazePicker changeMaze={(newMaze) => changeMaze(newMaze)} />\n            <FormGroup style={{ float: \"left\" }}>\n              <Button\n                onClick={() => visualize()}\n                variant=\"warning\"\n                size=\"lg\"\n                disabled={buttonDisable}\n              >\n                Visualize The Algorithm !\n              </Button>{\" \"}\n              <Button\n                onClick={() => reset()}\n                variant=\"danger\"\n                size=\"lg\"\n                disabled={buttonDisable}\n              >\n                Reset\n              </Button>{\" \"}\n            </FormGroup>\n          </Card.Body>\n        </Card>\n      </Form>\n    );\n  }\n}\n\nexport default Customisation;\n","export const recursiveDivision = (nodes, startX, startY, endX, endY, axis) => {\n\tconst drawnNodes1 = drawDungeon(nodes, endX, endY);\n\tconst drawnNodes2 = divide(nodes, startX + 2, startY + 2, endX - 2, endY - 2, axis);\n\tconst drawnNodes = [ ...drawnNodes1, ...drawnNodes2 ];\n\treturn { newNodes: nodes, drawnNodes };\n};\n\nconst drawDungeon = (nodes, endX, endY) => {\n\tlet drawnNodes = [];\n\tfor (let x = 0; x <= endX; x++) {\n\t\tnodes[x][0].type = 'wall';\n\t\tnodes[x][endY].type = 'wall';\n\t\tdrawnNodes.push(nodes[x][0]);\n\t\tdrawnNodes.push(nodes[x][endY]);\n\t}\n\n\tfor (let y = 0; y <= endY; y++) {\n\t\tnodes[0][y].type = 'wall';\n\t\tnodes[endX][y].type = 'wall';\n\t\tdrawnNodes.push(nodes[0][y]);\n\t\tdrawnNodes.push(nodes[endX][y]);\n\t}\n\n\treturn drawnNodes;\n};\n\nconst divide = (nodes, startX, startY, endX, endY, axis) => {\n\tlet drawnNodes = [];\n\tlet drawnNodes1;\n\tlet drawnNodes2;\n\n\tif (endX < startX || endY < startY) {\n\t\treturn [];\n\t} else if (axis === 'horizontal') {\n\t\tlet alternateX = [];\n\t\t// avoids consecutive walls\n\t\tfor (let x = startX; x <= endX; x += 2) {\n\t\t\talternateX.push(x);\n\t\t}\n\n\t\tlet alternateY = [];\n\t\tfor (let y = startY - 1; y <= endY + 1; y += 2) {\n\t\t\talternateY.push(y);\n\t\t}\n\n\t\tlet wallX = alternateX[Math.floor(Math.random() * alternateX.length)];\n\t\tlet passageY = alternateY[Math.floor(Math.random() * alternateY.length)];\n\n\t\tfor (var y = startY - 1; y <= endY + 1; y++) {\n\t\t\tif (y !== passageY && nodes[wallX][y].type !== 'start' && nodes[wallX][y].type !== 'end') {\n\t\t\t\tnodes[wallX][y].type = 'wall'; // change\n\t\t\t\tdrawnNodes.push(nodes[wallX][y]);\n\t\t\t}\n\t\t}\n\n\t\tif (wallX - startX - 2 > endY - startY) {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, wallX - 2, endY, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, wallX - 2, endY, 'vertical');\n\t\t}\n\t\tif (endX - wallX - 2 > endY - startY) {\n\t\t\tdrawnNodes2 = divide(nodes, wallX + 2, startY, endX, endY, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes2 = divide(nodes, wallX + 2, startY, endX, endY, 'vertical');\n\t\t}\n\t\treturn [ ...drawnNodes, ...drawnNodes1, ...drawnNodes2 ];\n\t} else {\n\t\tlet alternateX = [];\n\t\tfor (let x = startX - 1; x <= endX + 1; x += 2) {\n\t\t\talternateX.push(x);\n\t\t}\n\n\t\tlet alternateY = [];\n\t\tfor (let y = startY; y <= endY; y += 2) {\n\t\t\talternateY.push(y);\n\t\t}\n\n\t\tlet wallY = alternateY[Math.floor(Math.random() * alternateY.length)];\n\t\tlet passageX = alternateX[Math.floor(Math.random() * alternateX.length)];\n\n\t\tfor (var x = startX - 1; x <= endX + 1; x++) {\n\t\t\tif (x !== passageX && nodes[x][wallY].type !== 'start' && nodes[x][wallY].type !== 'end') {\n\t\t\t\tnodes[x][wallY].type = 'wall';\n\t\t\t\tdrawnNodes.push(nodes[x][wallY]);\n\t\t\t}\n\t\t}\n\n\t\tif (endX - startX > wallY - startY - 2) {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, endX, wallY - 2, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, endX, wallY - 2, 'vertical');\n\t\t}\n\t\tif (endX - startX > endY - wallY - 2) {\n\t\t\tdrawnNodes2 = divide(nodes, startX, wallY + 2, endX, endY, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes2 = divide(nodes, startX, wallY + 2, endX, endY, 'vertical');\n\t\t}\n\t\treturn [ ...drawnNodes, ...drawnNodes1, ...drawnNodes2 ];\n\t}\n};\n","export const simpleTerrain = (nodes, endX, endY) => {\n\tconst drawnNodes1 = drawDungeon(nodes, endX, endY);\n\tlet drawnNodes2 = [];\n\tnodes.forEach((row) => {\n\t\trow.forEach((node) => {\n\t\t\tif (Math.floor(Math.random() * 100 + 1) < 33 && node.type !== 'start' && node.type !== 'end') {\n\t\t\t\tnode.type = 'wall';\n\t\t\t\tdrawnNodes2.push(node);\n\t\t\t}\n\t\t});\n\t});\n\treturn { nodes, drawnNodes: [ ...drawnNodes1, ...drawnNodes2 ] };\n};\n\nconst drawDungeon = (nodes, endX, endY) => {\n\tlet drawnNodes = [];\n\tfor (let x = 0; x <= endX; x++) {\n\t\tnodes[x][0].type = 'wall';\n\t\tnodes[x][endY].type = 'wall';\n\t\tdrawnNodes.push(nodes[x][0]);\n\t\tdrawnNodes.push(nodes[x][endY]);\n\t}\n\n\tfor (let y = 0; y <= endY; y++) {\n\t\tnodes[0][y].type = 'wall';\n\t\tnodes[endX][y].type = 'wall';\n\t\tdrawnNodes.push(nodes[0][y]);\n\t\tdrawnNodes.push(nodes[endX][y]);\n\t}\n\n\treturn drawnNodes;\n};\n","export const flappyBirdGrid = (nodes, endX, endY) => {\n\tconst drawnNodes1 = drawDungeon(nodes, endX, endY);\n\tlet drawnNodes2 = [];\n\tfor (let i = 2; i < endY; i += 2) {\n\t\tlet hole = 1 + Math.floor(Math.random() * (endX - 1));\n\t\tfor (let j = 0; j < endX; j++) {\n\t\t\tif (j !== hole && nodes[j][i].type !== 'start' && nodes[j][i].type !== 'end') {\n\t\t\t\tnodes[j][i].type = 'wall';\n\t\t\t\tdrawnNodes2.push(nodes[j][i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn { nodes, drawnNodes: [ ...drawnNodes1, ...drawnNodes2 ] };\n};\n\nconst drawDungeon = (nodes, endX, endY) => {\n\tlet drawnNodes = [];\n\tfor (let x = 0; x <= endX; x++) {\n\t\tnodes[x][0].type = 'wall';\n\t\tnodes[x][endY].type = 'wall';\n\t\tdrawnNodes.push(nodes[x][0]);\n\t\tdrawnNodes.push(nodes[x][endY]);\n\t}\n\n\tfor (let y = 0; y <= endY; y++) {\n\t\tnodes[0][y].type = 'wall';\n\t\tnodes[endX][y].type = 'wall';\n\t\tdrawnNodes.push(nodes[0][y]);\n\t\tdrawnNodes.push(nodes[endX][y]);\n\t}\n\n\treturn drawnNodes;\n};\n","import { recursiveDivision } from './recursiveDivision';\nimport { simpleTerrain } from './simpleTerrain';\nimport { flappyBirdGrid } from './flappyBirdGrid';\n\nexport class MazeFacade {\n\tconstructor(nodes, startX, startY, endX, endY, axis) {\n\t\tthis.nodes = nodes;\n\t\tthis.startX = startX;\n\t\tthis.startY = startY;\n\t\tthis.endX = endX;\n\t\tthis.endY = endY;\n\t\tthis.axis = axis;\n\t}\n\n\trecursiveDivision() {\n\t\treturn recursiveDivision(this.nodes, this.startX, this.startY, this.endX, this.endY, this.axis);\n\t}\n\n\tsimpleTerrain() {\n\t\treturn simpleTerrain(this.nodes, this.endX, this.endY);\n\t}\n\n\tflappyBirdGrid() {\n\t\treturn flappyBirdGrid(this.nodes, this.endX, this.endY);\n\t}\n}\n","class Queue {\n\tconstructor() {\n\t\tthis.elements = [];\n\t}\n\n\tenqueue(object) {\n\t\tthis.elements.push(object);\n\t}\n\n\tdequeue() {\n\t\treturn this.elements.shift();\n\t}\n\n\tisEmpty() {\n\t\treturn this.elements.length === 0;\n\t}\n}\n\nexport const breadthFirstSearch = (start, end, nodes) => {\n\tconst nodesCopy = nodes.slice();\n\tconst visitedNodes = solve(start, end, nodes);\n\treturn { visitedNodes: visitedNodes, path: reConstructPath(start, end, nodesCopy) };\n};\n\nconst solve = (start, end, nodes) => {\n\tlet q = new Queue();\n\tq.enqueue(start);\n\n\tlet visitedNodes = [];\n\n\tnodes[start.row][start.column].isVisited = true;\n\tlet node;\n\tlet neighbours;\n\tlet found = false;\n\twhile (!q.isEmpty()) {\n\t\tnode = q.dequeue();\n\t\tneighbours = getNeighbours(node, nodes);\n\n\t\tneighbours.forEach((neighbour) => {\n\t\t\tif (!neighbour.isVisited) {\n\t\t\t\tif (neighbour.row === end.row && neighbour.column === end.column) {\n\t\t\t\t\tneighbour.isVisited = true;\n\t\t\t\t\tneighbour.prev = node;\n\t\t\t\t\tfound = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconsole.log('1');\n\t\t\t\tq.enqueue(neighbour);\n\t\t\t\tvisitedNodes.push(neighbour);\n\t\t\t\tneighbour.isVisited = true;\n\t\t\t\tneighbour.prev = node;\n\t\t\t}\n\t\t});\n\t\tif (found) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn visitedNodes;\n};\n\nconst reConstructPath = (start, end, nodes) => {\n\tlet path = [];\n\tfor (let curr = end; curr !== null; curr = curr.prev) {\n\t\tpath.push(curr);\n\t}\n\n\tpath.reverse();\n\n\tif (path[0] === start) {\n\t\tpath.shift();\n\t\tpath.pop();\n\t\treturn path;\n\t}\n\treturn [];\n};\n\nconst getNeighbours = (node, nodes) => {\n\tconst neighbours = [];\n\tconst { row, column } = node;\n\tif (row > 0) neighbours.push(nodes[row - 1][column]);\n\tif (row < nodes.length - 1) neighbours.push(nodes[row + 1][column]);\n\tif (column > 0) neighbours.push(nodes[row][column - 1]);\n\tif (column < nodes[0].length - 1) neighbours.push(nodes[row][column + 1]);\n\treturn neighbours.filter((neighbour) => {\n\t\treturn !neighbour.isVisited && neighbour.type !== 'wall';\n\t});\n};\n","import { breadthFirstSearch } from './breadthFirstSearch';\n\nexport class SearchFacade {\n\tconstructor(start, end, nodes) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.nodes = nodes;\n\t}\n\n\tbreadthFirstSearch() {\n\t\treturn breadthFirstSearch(this.start, this.end, this.nodes);\n\t}\n}\n","import React, { Component } from \"react\";\nimport NavBar from \"./NavBar/NavBar\";\nimport Board from \"./Board/Board\";\nimport Customisation from \"./Customisation/Customisation\";\n\nimport { MazeFacade } from \"../maze_algorithms/MazeFacade\";\nimport { SearchFacade } from \"../path_algorithms/SearchFacade\";\n\nimport { Row, Col } from \"react-bootstrap\";\n\nconst TOTAL_ROWS = 20;\nconst TOTAL_COLS = 40;\n\nconst START_NODE_ROW = 14;\nconst START_NODE_COL = 2;\nconst END_NODE_ROW = 3;\nconst END_NODE_COL = 22;\n\nexport class Pathfinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      nodes: [],\n      isMouseDown: false,\n      mode: \"draw\",\n      algorithm: \"bfs\",\n      maze: \"draw\",\n      buttonDisable: false,\n    };\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n\n  handleMouseDown(row, column) {\n    const newNodes = this.state.nodes.slice();\n    if (newNodes[row][column].type === \"regular\") {\n      newNodes[row][column].type = \"wall\";\n      this.setState({ nodes: newNodes, isMouseDown: true, mode: \"draw\" });\n    } else if (newNodes[row][column].type === \"wall\") {\n      newNodes[row][column].type = \"regular\";\n      this.setState({ nodes: newNodes, isMouseDown: true, mode: \"erase\" });\n    }\n  }\n\n  handleMouseEnter(row, column) {\n    if (this.state.isMouseDown) {\n      const newNodes = this.state.nodes.slice();\n      if (\n        this.state.mode === \"draw\" &&\n        newNodes[row][column].type === \"regular\"\n      ) {\n        newNodes[row][column].type = \"wall\";\n      } else if (\n        this.state.mode === \"erase\" &&\n        newNodes[row][column].type === \"wall\"\n      ) {\n        newNodes[row][column].type = \"regular\";\n      }\n\n      this.setState({ nodes: newNodes });\n    } else {\n      return;\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ isMouseDown: false });\n  }\n\n  changeAlgorithm(newAlg) {\n    this.setState({ algorithm: newAlg });\n  }\n\n  changeMaze(newMaze) {\n    this.setState({ maze: newMaze });\n  }\n\n  // FIX!!\n  drawMaze() {\n    // this.reset();\n    const nodesCopy = this.state.nodes.slice();\n    const { maze } = this.state;\n    const mazeFacade = new MazeFacade(\n      nodesCopy,\n      0,\n      0,\n      TOTAL_ROWS - 1,\n      TOTAL_COLS - 1,\n      \"horizontal\"\n    );\n    if (maze === \"draw\") {\n      return;\n    }\n    var { newNodes, drawnNodes } =\n      maze === \"simpleTerrain\"\n        ? mazeFacade.simpleTerrain()\n        : maze === \"recursiveDivision\"\n        ? mazeFacade.recursiveDivision()\n        : maze === \"flappyBirdGrid\"\n        ? mazeFacade.flappyBirdGrid()\n        : {};\n    let curr;\n    for (let i = 0; i < drawnNodes.length; i++) {\n      setTimeout(() => {\n        curr = drawnNodes[i];\n        document.getElementById(`node_${curr.row}_${curr.column}`).className =\n          \"walls\";\n      }, 6 * i);\n    }\n    return 6 * drawnNodes.length;\n  }\n\n  drawSearchPath() {\n    const { nodes } = this.state;\n    const startNode = nodes[START_NODE_ROW][START_NODE_COL];\n    const endNode = nodes[END_NODE_ROW][END_NODE_COL];\n    const searchFacade = new SearchFacade(startNode, endNode, nodes);\n    const { path, visitedNodes } = searchFacade.breadthFirstSearch(\n      startNode,\n      endNode,\n      nodes\n    );\n\n    let curr;\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        curr = visitedNodes[i];\n        document.getElementById(`node_${curr.row}_${curr.column}`).className =\n          \"visited\";\n      }, 5 * i);\n    }\n    setTimeout(() => {\n      for (let i = 0; i < path.length; i++) {\n        setTimeout(() => {\n          curr = path[i];\n          document.getElementById(`node_${curr.row}_${curr.column}`).className =\n            \"shortest-path\";\n        }, 30 * i);\n      }\n    }, 5 * visitedNodes.length);\n    return 5 * visitedNodes.length + 30 * path.length;\n  }\n\n  reset() {\n    let initialNodes = createNodes();\n    initialNodes.forEach((node) => (node.type = \"regular\"));\n    document.querySelectorAll(\"[id^='node']\").forEach((node) => {\n      if (\n        node.className === \"walls\" ||\n        node.className === \"shortest-path\" ||\n        node.className === \"visited\"\n      ) {\n        node.className = \"regular\";\n      }\n    });\n    initialNodes[START_NODE_ROW][START_NODE_COL].type = \"start\";\n    initialNodes[END_NODE_ROW][END_NODE_COL].type = \"end\";\n    this.setState({ nodes: initialNodes });\n  }\n\n  visualize() {\n    this.setState({ buttonDisable: true });\n    // this.reset();\n    setTimeout(() => {\n      const waitTime = this.drawMaze();\n      setTimeout(() => {\n        const waitTime2 = this.drawSearchPath();\n        setTimeout(() => {\n          this.setState({ buttonDisable: false });\n        }, waitTime2 + 200);\n      }, waitTime + 500);\n    }, 1100);\n  }\n\n  render() {\n    const { nodes, isMouseDown, buttonDisable } = this.state;\n    return (\n      <div onMouseUp={() => this.handleMouseUp()}>\n        <NavBar />\n        <Row>\n          <Col lg={8}>\n            <Board\n              nodes={nodes}\n              isMouseDown={isMouseDown}\n              onMouseDown={(row, column) => this.handleMouseDown(row, column)}\n              onMouseEnter={(row, column) => this.handleMouseEnter(row, column)}\n            />\n          </Col>\n          <Col lg={4}>\n            <Customisation\n              buttonDisable={buttonDisable}\n              visualize={() => this.visualize()}\n              reset={() => this.reset()}\n              changeAlgorithm={(newAlg) => this.changeAlgorithm(newAlg)}\n              changeMaze={(newMaze) => this.changeMaze(newMaze)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\n// Helpers\n\nconst createNodes = () => {\n  const nodes = [];\n  for (let row = 0; row < TOTAL_ROWS; row++) {\n    const rowNodes = [];\n    for (let column = 0; column < TOTAL_COLS; column++) {\n      rowNodes.push(createNodeObject(row, column));\n    }\n    nodes.push(rowNodes);\n  }\n  return nodes;\n};\n\nconst createNodeObject = (row, column) => {\n  return {\n    row,\n    column,\n    type: \"regular\",\n    isVisited: false,\n    prev: null,\n    dist: Infinity,\n  };\n};\n\nexport default Pathfinder;\n","import React, { Component } from 'react';\nimport Pathfinder from './components/Pathfinder';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Pathfinder />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}